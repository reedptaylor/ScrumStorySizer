@using Microsoft.AspNetCore.SignalR.Client
@implements IDisposable
@inject IVotingService VotingService
@inject IJSRuntime JSRuntime
@inject PersistentComponentState ApplicationState

<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="true" AdditionalAssemblies="new[] { typeof(ScrumStorySizer.Library.Pages.Master).Assembly }">
    <Found Context="routeData">
        <CascadingValue Name="_spinner" Value="_spinner" TValue="Spinner">
            <CascadingValue Name="_messagePopUp" Value="_messagePopUp" TValue="MessagePopUp">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            </CascadingValue>
        </CascadingValue>
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
<Footer />
<Spinner @ref="_spinner" />
<MessagePopUp @ref="_messagePopUp" />
<ConnectionError State="@VotingService?.HubConnection?.State" />

@code {
    private PersistingComponentStateSubscription persistingSubscription;

    private async Task OnUpdate() => await InvokeAsync(StateHasChanged);

    private async Task OnReconnect()
    {
        await VotingService.HubConnection.SendAsync(Constants.HUB_COMMAND_NEW_CONNECTION);
        await OnUpdate();
    }

    // Component references for access through cascading parameters
    MessagePopUp _messagePopUp;
    Spinner _spinner;

    protected override async Task OnInitializedAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);
        if (ApplicationState.TryTakeFromJson<VotingServiceData>(nameof(VotingServiceData), out VotingServiceData restored))
            VotingService.VotingServiceData = restored;

        if (VotingService.HubConnection != null)
        {
            // Set up SignalR Hub connection and subscribe to connection updates
            if (VotingService.HubConnection.State == HubConnectionState.Disconnected)
            {
                await VotingService.HubConnection.StartAsync();
                await VotingService.HubConnection.SendAsync(Constants.HUB_COMMAND_NEW_CONNECTION);
            }

            VotingService.HubConnection.Closed += (_) => OnUpdate();
            VotingService.HubConnection.Reconnected += (_) => OnReconnect();
            VotingService.HubConnection.Reconnecting += (_) => OnUpdate();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JSRuntime.RefocusUtil();
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(VotingServiceData), VotingService.VotingServiceData);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        persistingSubscription.Dispose();
    }
}